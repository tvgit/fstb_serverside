<?php

  /* lighttpd so konfigurieren, dass php-code in *.htm files ausgeführt wird!!*/
  ini_set('display_errors', 'On');
  ini_set('memory_limit', '-1');
  ini_set('max_execution_time', 300);
  error_reporting(E_ALL | E_STRICT);

  /* */
  $_debug_rh = True  ;// alles was nicht leer ist, ist wahr!
  $_debug_rh = False      ;
  $_datum = $_POST['datum'] ;
  // https://stackoverflow.com/questions/20017409/how-to-solve-php-error-notice-array-to-string-conversion-in
  $_station_name = $_POST['station_name'] ;
  // echo "<b>" . $_station_name . "</b>";


  $_intervall = $_POST['Intervall'] ;

  if($_debug_rh) {
    echo "<b>" . $_datum . "</b><p/>";
    echo "<p/>station_name: ";
    print_r($_POST['station_name'] );
    echo "<p/>";
    echo "<b> Intervall: " . $_intervall . "</b><p/>";
    }

  // https://stackoverflow.com/questions/3033242/sqlite3-date-and-interval-functions
  // o_orderdate < date('1995-03-01', '+3 month')

  $_station_name = $_POST['station_name'];
  if(empty($_station_name)) {
    //  echo("Keine Mess-Station ausgewählt. Bitte Checkbox ankreuzen!");
    }
    else {
    $N = count($_station_name);
    for($i=0; $i < $N; $i++) {
      //  echo("<br>" . "&emsp;&emsp;" . $_station_name[$i] );
      }
    }

  $db = new SQLite3("feinstaub_0011_NORM.db");
  $N = count($_station_name);
  $_cnt = 0 ;
  // Fuer Datumsberechnung braucht man die >PHP DateInterval Class<
  // https://www.webpagefx.com/blog/web-design/php-dateinterval-class/
  // values: unix_time_norm, datum, zeit, station_idx, station_name, sensor_idx, sensor_type, value, line_number

  for($i=0; $i < $N; $i++){
  // Für den Titel der Graphik: finde Anfang ($_t_start) und Ende ($_datum)des Intervalls:
    $_qu_str_values = "SELECT * FROM fstb_pivot WHERE station_name = '$_station_name[$i]' AND ";

    if ($_intervall == '0'){
    // $_qu_str_values = $_qu_str_values . "datum = '$_datum' ORDER BY unix_time_norm" ;
    $_qu_str_values = $_qu_str_values . "date( datum ) = date( '$_datum') ORDER BY unix_time_norm" ;
    $_t_start = $_datum ; // Intervallanfang == Intervallende; >$_t_start< für Graphiktitel
    }

    if ($_intervall == '7'){
    $_qu_str_values = $_qu_str_values . "date(datum) >= date( '$_datum', '-7 day' ) AND date(datum) <= date( '$_datum') ORDER BY unix_time_norm" ;

    $_res = $db->query( "SELECT date( '$_datum', '-7 day' );" );
    if ($_res){
      $_t_tmp   = $_res -> fetchArray(SQLITE3_ASSOC) ;
      // dieses seltsame Konstrukt (>reset()<) dient dazu, das erste Element eines arrays auszulesen:
      $_t_start = reset($_t_tmp); // >$_t_start< für Graphiktitel
      }
    }

    if ($_intervall == '31'){
    $_qu_str_values = $_qu_str_values . "date(datum) >= date( '$_datum', '-1 month' ) AND date(datum) <= date( '$_datum') ORDER BY unix_time_norm" ;

    $_res = $db->query( "SELECT date( '$_datum', '-1 month' );" );
    if ($_res){
      $_t_tmp   = $_res -> fetchArray(SQLITE3_ASSOC) ;
      // dieses seltsame Konstrukt (>reset()<) dient dazu, das erste Element eines arrays auszulesen:
      $_t_start = reset($_t_tmp);  // >$_t_start< für Graphiktitel
      }
    }

    if ($_intervall == '120'){
    $_qu_str_values = $_qu_str_values . "date(datum) >= date( '$_datum', '-4 month' ) AND date(datum) <= date( '$_datum') ORDER BY unix_time_norm" ;

    $_res = $db->query( "SELECT date( '$_datum', '-4 month' );" );
    if ($_res){
      $_t_tmp   = $_res -> fetchArray(SQLITE3_ASSOC) ;
      // dieses seltsame Konstrukt (>reset()<) dient dazu, das erste Element eines arrays auszulesen:
      $_t_start = reset($_t_tmp);  // >$_t_start< für Graphiktitel
      }
    }

    if($_debug_rh) {
      echo '<pre> SQL-query-string: '; print $_qu_str_values ; echo '</pre>';
    }

    // !! Mit >$_data< werden die Daten aus der db an das plotly script übergeben !!!
    $_res = $db->query($_qu_str_values);
    if ($_res){
    while ($_item = $_res -> fetchArray(SQLITE3_ASSOC)) {
      $_data[$_cnt] = $_item ;
      // echo '<pre>'; print $_cnt . '  ' ; print_r ($_item) ; echo '</pre>';
      $_cnt = $_cnt + 1;
      }
    }

    // !! Mit >$_datum_start< und >$_datum_ende< werden Start- und Ende-Datum an das plotly script übergeben !
    $_datum_ende  = $_datum ;
    $_datum_start = $_t_start ;
    if($_debug_rh) {
      echo '<pre>'; print $_datum_start  ; echo ' ... '; print $_datum_ende ; echo '</pre>';
    }
  }


    // !! Mit >$_sensors< werden die Daten aus der db an das plotly script übergeben !!!
    $_qu_str_sensor_type = "SELECT sensor_type FROM sensors ORDER BY sensor_type";
    // echo '<pre>'; print $_qu_str_sensor_type ; echo '</pre>';
    $_res = $db->query($_qu_str_sensor_type);
    $_cnt = 0 ;
    if ($_res){
    while ($_item = $_res -> fetchArray(SQLITE3_ASSOC)) {
      $_sensors[$_cnt] = $_item ;
      if($_debug_rh) {
        echo '<pre>'; print 'sensors: ' . $_cnt . '  ' ; print_r ($_item) ; echo '</pre>';
      }
      $_cnt = $_cnt + 1;
      }
    }

    // !! Mit >$_stations< werden die Daten aus der db an das plotly script übergeben !!!
    $_qu_str_station_name = "SELECT station_name FROM stations";
    // echo '<pre>'; print $_qu_str_station_name ; echo '</pre>';
    $_res = $db->query($_qu_str_station_name);
    $_cnt = 0 ;
    if ($_res){
    // while ($_item = $_res -> fetchArray(SQLITE3_ASSOC)) {
    while ($_item = $_res -> fetchArray(SQLITE3_ASSOC)) {
      $_stations[$_cnt] = $_item;
      if($_debug_rh) {
        echo '<pre>'; print  'stations: ' . $_cnt . '  ' ; print_r ($_stations[$_cnt]) ; echo '</pre>';
      }
      $_cnt = $_cnt + 1;
      }
    }

    if($_debug_rh) {
      echo '<pre>'; print  'php: Ende'; echo '</pre>';
    }
?>

  <head>
    <!-- Plotly.js -->
    <script src="https://cdn.plot.ly/plotly-latest.min.js"></script>
  </head>

  <body>
    <div id="myDiv" style="width: 480px; height: 400px;">
      <!-- Plotly chart will be drawn inside this DIV -->
    </div>
    <script>
      // https://stackoverflow.com/questions/5560248/programmatically-lighten-or-darken-a-hex-color-or-rgb-and-blend-colors/13542669#13542669
      function shadeBlendConvert(p, from, to) {
        if (typeof(p) != "number" || p < -1 || p > 1 || typeof(from) != "string" || (from[0] != 'r' && from[0] != '#') || (typeof(to) != "string" && typeof(to) != "undefined")) return null; //ErrorCheck
        if (!this.sbcRip) this.sbcRip = (d) => {
          let l = d.length,
            RGB = new Object();
          if (l > 9) {
            d = d.split(",");
            if (d.length < 3 || d.length > 4) return null; //ErrorCheck
            RGB[0] = i(d[0].slice(4)), RGB[1] = i(d[1]), RGB[2] = i(d[2]), RGB[3] = d[3] ? parseFloat(d[3]) : -1;
          } else {
            if (l == 8 || l == 6 || l < 4) return null; //ErrorCheck
            if (l < 6) d = "#" + d[1] + d[1] + d[2] + d[2] + d[3] + d[3] + (l > 4 ? d[4] + "" + d[4] : ""); //3 digit
            d = i(d.slice(1), 16), RGB[0] = d >> 16 & 255, RGB[1] = d >> 8 & 255, RGB[2] = d & 255, RGB[3] = l == 9 || l == 5 ? r(((d >> 24 & 255) / 255) * 10000) / 10000 : -1;
          }
          return RGB;
        }
        var i = parseInt,
          r = Math.round,
          h = from.length > 9,
          h = typeof(to) == "string" ? to.length > 9 ? true : to == "c" ? !h : false : h,
          b = p < 0,
          p = b ? p * -1 : p,
          to = to && to != "c" ? to : b ? "#000000" : "#FFFFFF",
          f = this.sbcRip(from),
          t = this.sbcRip(to);
        if (!f || !t) return null; //ErrorCheck
        if (h) return "rgb(" + r((t[0] - f[0]) * p + f[0]) + "," + r((t[1] - f[1]) * p + f[1]) + "," + r((t[2] - f[2]) * p + f[2]) + (f[3] < 0 && t[3] < 0 ? ")" : "," + (f[3] > -1 && t[3] > -1 ? r(((t[3] - f[3]) * p + f[3]) * 10000) / 10000 : t[3] < 0 ? f[3] : t[3]) + ")");
        else return "#" + (0x100000000 + (f[3] > -1 && t[3] > -1 ? r(((t[3] - f[3]) * p + f[3]) * 255) : t[3] > -1 ? r(t[3] * 255) : f[3] > -1 ? r(f[3] * 255) : 255) * 0x1000000 + r((t[0] - f[0]) * p + f[0]) * 0x10000 + r((t[1] - f[1]) * p + f[1]) * 0x100 + r((t[2] - f[2]) * p + f[2])).toString(16).slice(f[3] > -1 || t[3] > -1 ? 1 : 3);
      }

      // https://stackoverflow.com/questions/30219738/is-there-a-way-to-programmatically-darken-the-color-given-rgb-values
      function LightenDarkenColor(col, amt) {
        var usePound = false;
        if (col[0] == "#") {
          col = col.slice(1);
          usePound = true;
        }
        var num = parseInt(col, 16);
        var r = (num >> 16) + amt;
        if (r > 255) {
          r = 255;
        } else if (r < 0) {
          r = 0;
        }
        var b = ((num >> 8) & 0x00FF) + amt;
        if (b > 255) {
          b = 255;
        } else if (b < 0) {
          b = 0;
        }
        var g = (num & 0x0000FF) + amt;
        if (g > 255) {
          g = 255;
        } else if (g < 0) {
          g = 0;
        }
        return (usePound ? "#" : "") + (g | (b << 8) | (r << 16)).toString(16);
      }

      function make_trace(x, y, station_name, sensor_type, color, dash) {
        trace = {
          x,
          y,
          line: {
            color: color,
            // shape: 'spline',
            shape: 'linear',
            dash: dash,
            width: 0.5,
            //            width: 2,
          },
          mode: 'lines',
          connectgaps: false,
          name: station_name + ': ' + sensor_type
        }
        console.log(">>  make_trace(): ".concat(trace.name, ":  ", trace.line.color, "  ", trace.line.dash));
        return trace
      };

      function show_ele(json, index) {
        for (var key in json) {
          console.log(key.concat(": ", json[key]));
        }
      }


      function processData_from_array(stations, sensors, data, datum_intervall) {
        // console.log("processData_from_array: BEGIN");
        // stations.forEach((show_ele));
        // sensors.forEach(show_ele); 

        // exclude sensors: max_micro, min_micro, signal, samples.
        var sensors_excl = new Array('max_micro', 'min_micro', 'signal', 'samples');
        sensors_excl.forEach(sensor => console.log("sensors_excl: ".concat(sensor)));
        sensors.forEach(function(sensor) {
          for (var key in sensor) {
            // console.log("sensors:  " + key + " >> " + sensor[key] + ",  sensors_excl.indexOf(sensor[key]) == " + sensors_excl.indexOf(sensor[key]));
            if (sensors_excl.indexOf(sensor[key]) != -1) {
              delete sensor[key];
              // console.log("sensors:  " + key + " >> " + sensor[key] + " deleted. ");
            }
          }
        });

        const ordered = {};
        Object.keys(sensors).sort().forEach(function(key) {
          ordered[key] = sensors[key];
        });

        /*
                console.log("-------------------------------------------------- ");
                console.log("sensors: ");
                console.log("sensors.length= " + sensors.length);
                sensors.forEach(function(sensor) {
                  for (var key in sensor) {
                    console.log("sensors:  " + key + " >> " + sensor[key]);
                  }
                });
        */

        var data_sets = new Array();
        var traces = new Array();

        stations.forEach(function(station, index) {
          var station_name = station.station_name;
          console.log("".concat("station_name=  ", station.station_name));
          sensors.forEach(function(sensor) {
            for (var key in sensor) {
              console.log(station_name + " - sensor: " + key + " >> " + sensor[key]);
            }
          });

          sensors.forEach(function(sensor, index) {
            for (var key in sensor) {
              var sensor_type = sensor[key];
              console.log(">>  sensor_type: " + sensor_type + ";  data.length: " + data.length);
              var x, y;
              x = [], y = [];
              for (var idx = 0; idx < data.length; idx++) {
                var row = data[idx];
                if (row['station_name'] == station_name) {
                  // x.push(row["unix_time_norm"]);
                  x.push(row["datum"]);
                  y.push(row[sensor_type]); // !!! MUSS in [] geschrieben werden, da VARIABLE. (darf nicht in .-Notation stehen) !!!!
                  // console.log("".concat("sensor_type= ", sensor_type, ";  utime=  ", row["unix_time_norm"], ";  val=  ", row[sensor_type]));
                }
              }
              var data_set = {
                station_name: station_name,
                sensor_type: sensor_type,
                x: x,
                y: y,
              }
              data_sets.push(data_set);
            }
          });
        });

        console.log(">>  data_sets.length: ".concat(data_sets.length));
        for (var idx = 0; idx < data_sets.length; idx++) {
          data_set = data_sets[idx]
          console.log(">>  idx: ".concat(idx, ";  data_sets[idx]['station_name']:", data_set['station_name'], ";  data_sets[idx]['sensor_type']:", data_set['sensor_type']));
        }


        // http://colorsupplyyy.com/app/
        colors_array = ["#F0A32F", "#844D9E", "#367ABD"];
        colors_array = ["#56B949", "#367ABD", "#EB7B2D"];

        // https://plot.ly/python/reference/   search for 'dash':
        // ... or a dash length list in px (eg "5px,10px,2px,2px"). 
        // dash_array = ["solid", "dot", "dash", "longdash", "dashdot", "longdashdot"];
        dash_array = ["solid"];

        station_old = -1;
        sensor_old = -1;
        color_cnt = -1;
        dash_cnt = -1;

        console.log(">>  data_sets.length: ".concat(data_sets.length));
        for (var idx = 0; idx < data_sets.length; idx++) {
          data_set = data_sets[idx];
          x = data_set.x;
          y = data_set.y;

          station_name = data_set.station_name;
          sensor_type = data_set.sensor_type;

          if (station_name != station_old) {
            station_old = station_name;
            color_cnt++;
            color_idx = color_cnt % colors_array.length;
            color = colors_array[color_idx];
            dash_cnt = 0;
          }

          if (sensor_type != sensor_old) {
            sensor_old = sensor_type;
            //            amt = 15;
            //            color = LightenDarkenColor(color, amt);
            p = 1.15;
            p = -0.10;
//            color = shadeBlendConvert(p, color, "#000000");
            color = shadeBlendConvert(p, color);
            dash_cnt++;
            dash_idx = dash_cnt % dash_array.length;
            dash = dash_array[dash_idx];
          }

          new_trace = make_trace(x, y, station_name, sensor_type, color, dash);
          traces.push(new_trace);
          //Do something
        }
        makePlotly(traces, datum_intervall);
      }

      function makePlotly(data, datum_intervall) {
        var plotDiv = document.getElementById("plot");
        // https://plot.ly/create/?fid=Will_Manns:36 : JSON > object > layout
        var layout = {
          autosize: false,
          width: 1000,
          height: 500,
          title: 'Feinstaub: ' + datum_intervall,
          yaxis: {
            range: [0, 80]
          },
          xaxis: {
            title: "Datum - Zeit",
            tickfont: {
              size: 8
            },
            //tickformat:	"%a %Y-%m-%d %H-%M-%S",
            //tickformat: "%a %m-%d %H-%M",
            tickformat: "%a %Y-%m-%d %H",
          },
          // https://community.plot.ly/t/set-range-on-xaxis-with-dates/1040/2
          //			xaxis: {range: [2, 5]}
        };

        Plotly.newPlot('myDiv', data, layout)
      };


      // *****************************************
      // ************ main program: **************
      // *****************************************

      console.log('Anfang ');

      // Fetch SQL-query via php - var: >($_qu_str_values<
      // var qu_str_values = <?php echo json_encode($_qu_str_values, JSON_PRETTY_PRINT) ?>;
      // Fetch stations from database via php - var: >$_stations<
      var stations = <?php echo json_encode($_stations, JSON_PRETTY_PRINT) ?>;
      // Fetch sensors from database via php - var: >$_sensors<
      var sensors = <?php echo json_encode($_sensors, JSON_PRETTY_PRINT) ?>;
      // Fetch values from database via php - var: >$_data<
      var data = <?php echo json_encode($_data, JSON_PRETTY_PRINT) ?>;
      var last_ele = data[data.length - 1];
      var datum_ende = <?php echo json_encode($_datum_ende, JSON_PRETTY_PRINT) ?>;
      var datum_start = <?php echo json_encode($_datum_start, JSON_PRETTY_PRINT) ?>;
      if (datum_start == datum_ende) {
        datum_intervall = datum_start;
      } else {
        datum_intervall = datum_start + '  ...  ' + datum_ende;
      }

      //makeplot_from_csv(); // Plotly.d3.csv( ... ) -> processData_from_csv(...) -> makePlotly( ... )
      // Plotly.d3.csv( ... )  # fetches data
      processData_from_array(stations, sensors, data, datum_intervall);
      // processData(...)      # reformats data in appropriate data structure
      // makePlotly( ... )     # makes grph in ELement "plot"

    </script>
  </body>
