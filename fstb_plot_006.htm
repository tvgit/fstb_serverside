<?php

  /* lighttpd so konfigurieren, dass php-code in *.htm files ausgeführt wird!!*/
  ini_set('display_errors', 'On');
  error_reporting(E_ALL | E_STRICT);

  /* */
  $_datum = $_POST['datum'] ;
  echo "<b>" . $_datum . "</b><p/>";
  // https://stackoverflow.com/questions/20017409/how-to-solve-php-error-notice-array-to-string-conversion-in
  echo "<p/>station_name: ";
  print_r($_POST['station_name'] );
  echo "<p/>";
  $_station_name = $_POST['station_name'] ;
  // echo "<b>" . $_station_name . "</b>";


  $_intervall = $_POST['Intervall'] ;
  echo "<b> Intervall: " . $_intervall . "</b><p/>";
  // https://stackoverflow.com/questions/3033242/sqlite3-date-and-interval-functions
  // o_orderdate < date('1995-03-01', '+3 month')

  $_station_name = $_POST['station_name'];
    if(empty($_station_name)) {
    //  echo("Keine Mess-Station ausgewählt. Bitte Checkbox ankreuzen!");
    }
    else {
    $N = count($_station_name);
    for($i=0; $i < $N; $i++) {
      //  echo("<br>" . "&emsp;&emsp;" . $_station_name[$i] );
      }
    }

  $db = new SQLite3("feinstaub_0011_NORM.db");
  $N = count($_station_name);
  $_cnt = 0 ;
  // Fuer Datumsberechnung braucht man die >PHP DateInterval Class<
  // https://www.webpagefx.com/blog/web-design/php-dateinterval-class/
  // values: unix_time_norm, datum, zeit, station_idx, station_name, sensor_idx, sensor_type, value, line_number

  for($i=0; $i < $N; $i++){
  // Für den Titel der Graphik: finde Anfang ($_t_start) und Ende ($_datum)des Intervalls:
    $_qu_str_values = "SELECT * FROM fstb_pivot WHERE station_name = '$_station_name[$i]' AND ";

    if ($_intervall == '0'){
    // $_qu_str_values = $_qu_str_values . "datum = '$_datum' ORDER BY unix_time_norm" ;
    $_qu_str_values = $_qu_str_values . "date( datum ) = date( '$_datum') ORDER BY unix_time_norm" ;
    $_t_start = $_datum ; // Intervallanfang == Intervallende; >$_t_start< für Graphiktitel
    }

    if ($_intervall == '7'){
    $_qu_str_values = $_qu_str_values . "date(datum) >= date( '$_datum', '-7 day' ) AND date(datum) <= date( '$_datum') ORDER BY unix_time_norm" ;

    $_res = $db->query( "SELECT date( '$_datum', '-7 day' );" );
    if ($_res){
      $_t_tmp   = $_res -> fetchArray(SQLITE3_ASSOC) ;
      // dieses seltsame Konstrukt (>reset()<) dient dazu, das erste Element eines arrays auszulesen:
      $_t_start = reset($_t_tmp); // >$_t_start< für Graphiktitel
      }
    }

    if ($_intervall == '31'){
    $_qu_str_values = $_qu_str_values . "date(datum) >= date( '$_datum', '-1 month' ) AND date(datum) <= date( '$_datum') ORDER BY unix_time_norm" ;

    $_res = $db->query( "SELECT date( '$_datum', '-1 month' );" );
    if ($_res){
      $_t_tmp   = $_res -> fetchArray(SQLITE3_ASSOC) ;
      // dieses seltsame Konstrukt (>reset()<) dient dazu, das erste Element eines arrays auszulesen:
      $_t_start = reset($_t_tmp);  // >$_t_start< für Graphiktitel
      }
    }

    echo '<pre> SQL-query-string: '; print $_qu_str_values ; echo '</pre>';

    // !! Mit >$_data< werden die Daten aus der db an das plotly script übergeben !!!
    $_res = $db->query($_qu_str_values);
    if ($_res){
    while ($_item = $_res -> fetchArray(SQLITE3_ASSOC)) {
      $_data[$_cnt] = $_item ;
      // echo '<pre>'; print $_cnt . '  ' ; print_r ($_item) ; echo '</pre>';
      $_cnt = $_cnt + 1;
      }
    }

    // !! Mit >$_datum_start< und >$_datum_ende< werden Start- und Ende-Datum an das plotly script übergeben !
    $_datum_ende  = $_datum ;
    $_datum_start = $_t_start ;
    echo '<pre>'; print $_datum_ende  ; echo '</pre>';
    echo '<pre>'; print $_datum_start ; echo '</pre>';
  }


    // !! Mit >$_sensors< werden die Daten aus der db an das plotly script übergeben !!!
    $_qu_str_sensor_type = "SELECT sensor_type FROM sensors";
    echo '<pre>'; print $_qu_str_sensor_type ; echo '</pre>';
    $_res = $db->query($_qu_str_sensor_type);
    $_cnt = 0 ;
    if ($_res){
    while ($_item = $_res -> fetchArray(SQLITE3_ASSOC)) {
      $_sensors[$_cnt] = $_item ;
      echo '<pre>'; print $_cnt . '  ' ; print_r ($_item) ; echo '</pre>';
      $_cnt = $_cnt + 1;
      }
    }

    // !! Mit >$_stations< werden die Daten aus der db an das plotly script übergeben !!!
    $_qu_str_station_name = "SELECT station_name FROM stations";
    echo '<pre>'; print $_qu_str_station_name ; echo '</pre>';
    $_res = $db->query($_qu_str_station_name);
    $_cnt = 0 ;
    if ($_res){
    // while ($_item = $_res -> fetchArray(SQLITE3_ASSOC)) {
    while ($_item = $_res -> fetchArray(SQLITE3_ASSOC)) {
      $_stations[$_cnt] = $_item;
      echo '<pre>'; print $_cnt . '  ' ; print_r ($_stations[$_cnt]) ; echo '</pre>';
      $_cnt = $_cnt + 1;
      }
    }

  /*
  CREATE TABLE fstb (
      unix_time_norm INTEGER,
      ux_time      INTEGER,
      esp8266id    STRING,
      zeit_norm,
      datum,
      uhrzeit,
      humidity     REAL,
      temperature  REAL,
      SDS_P1       REAL,
      SDS_P2       REAL,
      line_number  INTEGER,
      PRIMARY KEY (
          ux_time,
          esp8266id
      )
  );

  [ux_time]      => 1496399550
  [unix_time_norm] => 1496399473
  [esp8266id]    => 2326588
  [zeit_norm]    => 2017-06-02 12:32:30	       #       normiert!
  [datum]        => 2017-06-02	               # nicht normiert!
  [uhrzeit]      => 12:31:13	               # nicht normiert!
  [humidity]     => 52.4
  [temperature]  => 24.6
  [SDS_P1]       => 11.17
  [SDS_P2]       => 9.67
  [line_number]  => 608                      #
  */
?>

  <head>
    <!-- Plotly.js -->
    <script src="https://cdn.plot.ly/plotly-latest.min.js"></script>
  </head>

  <body>
    <div id="myDiv" style="width: 480px; height: 400px;">
      <!-- Plotly chart will be drawn inside this DIV -->
    </div>
    <script>
      function makeplot_from_csv() {
        // Plotly.d3.csv("https://raw.githubusercontent.com/plotly/datasets/master/2014_apple_stock.csv", function(data){ processData(data) } );};
        Plotly.d3.csv('http://192.168.2.104/feinstaublog/20170626_test.csv', function(csv_data) {
          processData_from_csv(csv_data)
        });
      };


      function make_trace(x, y, station_name, sensor_type, color, dash) {
        trace = {
          x,
          y,
          line: {
            color: color,
            // shape: 'spline',
            shape: 'linear',
            dash: dash,
            width: 0.5
          },
          mode: 'lines',
          connectgaps: false,
          name: station_name + ': ' + sensor_type
        }
        console.log(">>  make_trace(): ".concat(trace.line.color, "  ", trace.line.dash));
        return trace
      };


      function make_trace_from_csv(data_csv, station_name, sensor_type, color) {
        var x, y
        x = [], y = []
        for (var i = 0; i < data_csv.length; i++) {
          row = data_csv[i];
          if (row['station_name'] == station_name) {
            x.push(row['datum']);
            y.push(row[sensor_type]);
          }
        }
        // console.log('datum', x, sensor_type, y);
        return make_trace(x, y, station_name, sensor_type, color)
      };

      function processData_from_csv(data) {
        trace_01 = make_trace_from_csv(data, '2326588', 'SDS_P1', 'rgb(66, 127, 14)')
        trace_02 = make_trace_from_csv(data, '2326588', 'SDS_P2', 'rgb(0,100,0)')
        trace_03 = make_trace_from_csv(data, '3912953', 'SDS_P1', 'rgb(30,144,255)')
        trace_04 = make_trace_from_csv(data, '3912953', 'SDS_P2', 'blue')
        var data = [trace_01, trace_02, trace_03, trace_04];
        makePlotly(data);
      };


      // https://stackoverflow.com/questions/966225/how-can-i-create-a-two-dimensional-array-in-javascript

      function processData_from_array(stations, sensors, data, datum_intervall) {
        console.log("processData_from_array: BEGIN");
        console.log("stations.length: ".concat(stations.length));
        console.log("sensors.length: ".concat(sensors.length));

        var data_sets = new Array();
        var traces = new Array();

        function show_ele(json, index) {
          for (var key in json) {
            console.log(key.concat(": ", json[key]));
          }
        }

        sensors.forEach(show_ele);
        stations.forEach((show_ele));
        // function für >foreach<:

        console.log("stations.forEach((fE_make_track)); BEFORE");
        stations.forEach((fE_make_track));
        // https://stackoverflow.com/questions/16507222/create-json-object-dynamically-via-javascript-without-concate-strings
        /*
        Die data_sets zusammenstellen:
        Name der Mess-Station
        Name des Sensors
        x == array von utime
        y == array der Messwerte
        */
        function fE_make_track(station, index) {
          var station_name = station.station_name;
          console.log("".concat("station_name=  ", station.station_name));
          sensors.forEach(function(sensor) {
            var sensor_type = sensor.sensor_type;
            console.log(">>  sensor_type: ".concat(sensor_type));
            var x, y;
            x = [], y = [];
            console.log(">>  data.length: ".concat(data.length));
            for (var idx = 0; idx < data.length; idx++) {
              var row = data[idx];
              if (row['station_name'] == station_name) {
                x.push(row["unix_time_norm"]);
                y.push(row[sensor_type]); // !!! MUSS in [] geschrieben werden, da VARIABLE. (darf nicht in .-Notation stehen) !!!!
                // console.log("".concat("sensor_type= ", sensor_type, ";  utime=  ", row["unix_time_norm"], ";  val=  ", row[sensor_type]));
              }
            }
            var data_set = {
              station_name: station_name,
              sensor_type: sensor_type,
              x: x,
              y: y,
            }
            data_sets.push(data_set);
            //            console.log("".concat("x:  ", data_set.x) )
            //            console.log("".concat("y:  ", data_set.y) )
          });
        }


        console.log(">>  data_sets.length: ".concat(data_sets.length));
        for (var idx = 0; idx < data_sets.length; idx++) {
          data_set = data_sets[idx]
          console.log(">>  idx: ".concat(idx, ";  data_sets[idx]['station_name']:", data_set['station_name'], ";  data_sets[idx]['sensor_type']:", data_set['sensor_type']));
          //          if (idx == 15){
          //            for(cnt = 0; cnt < data_set.x.length; cnt++){
          //              console.log( "".concat(data_set.x[cnt], "  ", data_set.y[cnt]) )
          //            }
          //          }
        }


        // http://colorsupplyyy.com/app/
        colors_array = ["#F0A32F", "#367ABD", "#844D9E"];
        // https://plot.ly/python/reference/   search for 'dash':
        // ... or a dash length list in px (eg "5px,10px,2px,2px"). 
        dash_array = ["solid", "dot", "dash", "longdash", "dashdot", "longdashdot"];

        station_old = -1;
        sensor_old = -1;
        color_cnt = -1;
        dash_cnt = -1;

        for (var idx = 0; idx < data_sets.length; idx++) {
          data_set = data_sets[idx];
          x = data_set.x;
          y = data_set.y;

          station_name = data_set.station_name;
          sensor_type = data_set.sensor_type;

          if (station_name != station_old) {
            station_old = station_name;
            color_cnt++;
            color_idx = color_cnt % colors_array.length;
            color = colors_array[color_idx];
            dash_cnt = 0;
          }

          if (sensor_type != sensor_old) {
            sensor_old = sensor_type;
            dash_cnt++;
            dash_idx = dash_cnt % dash_array.length;
            dash = dash_array[dash_idx];
          }

          new_trace = make_trace(x, y, station_name, sensor_type, color, dash);
          traces.push(new_trace);
          //Do something
        }
        makePlotly(data);





      }
      /*
              // console.log(data_sets);
              var layout = {
                barmode: 'group'
                };

              Plotly.newPlot('tester', traces, layout);
              trace_01 = make_trace_from_array_ORG (data, '2326588', 'SDS_P1', 'rgb(66, 127, 14)')
              trace_02 = make_trace_from_array_ORG (data, '2326588', 'SDS_P2', 'rgb(0,100,0)')
              trace_03 = make_trace_from_array_ORG (data, '3912953', 'SDS_P1', 'rgb(30,144,255)')
              trace_04 = make_trace_from_array_ORG (data, '3912953', 'SDS_P2', 'blue')
              var data = [ trace_01, trace_02, trace_03, trace_04];
              makePlotly( data, datum_intervall );
              */
      /*
          console.log("processData_from_array: END")
        };
*/
      function makePlotly(data, datum_intervall) {
        var plotDiv = document.getElementById("plot");
        // https://plot.ly/create/?fid=Will_Manns:36 : JSON > object > layout
        var layout = {
          autosize: false,
          width: 1000,
          height: 500,
          title: 'Feinstaub: ' + datum_intervall,
          yaxis: {
            range: [0, 80]
          },
          xaxis: {
            title: "X-Achse",
            tickfont: {
              size: 8
            },
            //tickformat:	"%a %Y-%m-%d %H-%M-%S",
            tickformat: "%a %m-%d %H-%M",
          },
          // https://community.plot.ly/t/set-range-on-xaxis-with-dates/1040/2
          //			xaxis: {range: [2, 5]}
        };

        Plotly.newPlot('myDiv', data, layout)
      };


      // *****************************************
      // ************ main program: **************
      // *****************************************

      console.log('Anfang ');

      // Fetch SQL-query via php - var: >($_qu_str_values<
      // var qu_str_values = <?php echo json_encode($_qu_str_values, JSON_PRETTY_PRINT) ?>;
      // Fetch stations from database via php - var: >$_stations<
      var stations = <?php echo json_encode($_stations, JSON_PRETTY_PRINT) ?>;
      // Fetch sensors from database via php - var: >$_sensors<
      var sensors = <?php echo json_encode($_sensors, JSON_PRETTY_PRINT) ?>;
      // Fetch values from database via php - var: >$_data<
      var data = <?php echo json_encode($_data, JSON_PRETTY_PRINT) ?>;
      var last_ele = data[data.length - 1];
      var datum_ende = <?php echo json_encode($_datum_ende, JSON_PRETTY_PRINT) ?>;
      var datum_start = <?php echo json_encode($_datum_start, JSON_PRETTY_PRINT) ?>;
      if (datum_start == datum_ende) {
        datum_intervall = datum_start;
      } else {
        datum_intervall = datum_start + ' - ' + datum_ende;
      }

      //makeplot_from_csv(); // Plotly.d3.csv( ... ) -> processData_from_csv(...) -> makePlotly( ... )
      // Plotly.d3.csv( ... )  # fetches data
      processData_from_array(stations, sensors, data, datum_intervall);
      // processData(...)      # reformats data in appropriate data structure
      // makePlotly( ... )     # makes grph in ELement "plot"

    </script>
  </body>
