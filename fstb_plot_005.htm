<?php

  /* lighttpd so konfigurieren, dass php-code in *.htm files ausgeführt wird!!*/
  ini_set('display_errors', 'On');
  error_reporting(E_ALL | E_STRICT);

  $_datum = $_POST['datum'] ;
  /*
  echo "<b>" . $_datum . "</b>:";
  echo "<b>" . $_POST['esp8266id'] . "</b>";
  */

  $_intervall = $_POST['Intervall'] ;
  // https://stackoverflow.com/questions/3033242/sqlite3-date-and-interval-functions
  // o_orderdate < date('1995-03-01', '+3 month')


  $_esp8266id = $_POST['esp8266id'];
    if(empty($_esp8266id))
    {
    //  echo("Kein $_esp8266id ausgewählt. Bitte Checkbox ankreuzen!");
    }
    else
    {
      $N = count($_esp8266id);
      for($i=0; $i < $N; $i++)
      {
      //  echo("<br>" . "&emsp;&emsp;" . $_esp8266id[$i] );
      }
    }

  $db = new SQLite3("feinstaub_0011_NORM.db");

  $N = count($_esp8266id);
  $_cnt = 0 ;
  // Fuer Datumsberechnung braucht man die >PHP DateInterval Class<
  // https://www.webpagefx.com/blog/web-design/php-dateinterval-class/

  for($i=0; $i < $N; $i++){
    // Für den Titel der Graphik: finde Anfang ($_t_start) und Ende ($_datum)des Intervalls:
    $_qu_str = "SELECT unix_time_norm, esp8266id, zeit_norm, uhrzeit, SDS_P1, SDS_P2 FROM fstb WHERE esp8266id = '$_esp8266id[$i]' AND ";

    if ($_intervall == '0'){
      // $_qu_str = $_qu_str . "datum = '$_datum' ORDER BY date(unix_time_norm)" ;
      $_qu_str = $_qu_str . "date( zeit_norm ) = date( '$_datum') ORDER BY date(unix_time_norm)" ;
      $_t_start = $_datum ; // Intervallanfang == Intervallende; >$_t_start< für Graphiktitel
    }

    if ($_intervall == '7'){
      // $_qu_str = $_qu_str . "datum > date( '$_datum', '-7 day' ) AND datum < date( '$_datum') ORDER BY zeit_norm" ;
      // $_qu_str = $_qu_str . "datum > date( '$_datum', '-7 day' ) AND datum < date( '$_datum') ORDER BY date(unix_time_norm)" ;
      $_qu_str = $_qu_str . "date(zeit_norm) >= date( '$_datum', '-7 day' ) AND date(zeit_norm) <= date( '$_datum') ORDER BY date(unix_time_norm)" ;

      $_res = $db->query( "SELECT date( '$_datum', '-7 day' );" );
      if ($_res){
        $_t_tmp   = $_res -> fetchArray(SQLITE3_ASSOC) ;
        // dieses seltsame Konstrukt (>reset()<) dient dazu, das erste Element eines arrays auszulesen:
        $_t_start = reset($_t_tmp); // >$_t_start< für Graphiktitel
        }
    }
    if ($_intervall == '31'){
      // $_qu_str = $_qu_str . "datum > date( '$_datum', '-1 month' ) AND datum < date( '$_datum') ORDER BY date(zeit_norm)" ;
      // $_qu_str = $_qu_str . "datum > date( '$_datum', '-1 month' ) AND datum < date( '$_datum') ORDER BY date(unix_time_norm)" ;
      $_qu_str = $_qu_str . "date(zeit_norm) >= date( '$_datum', '-1 month' ) AND date(zeit_norm) <= date( '$_datum') ORDER BY date(unix_time_norm)" ;

      $_res = $db->query( "SELECT date( '$_datum', '-1 month' );" );
      if ($_res){
        $_t_tmp   = $_res -> fetchArray(SQLITE3_ASSOC) ;
        // dieses seltsame Konstrukt (>reset()<) dient dazu, das erste Element eines arrays auszulesen:
        $_t_start = reset($_t_tmp);  // >$_t_start< für Graphiktitel
        }
    }

    // echo '<pre>'; print $_qu_str ; echo '</pre>';

    // !! Mit >$_data< werden die Daten aus der db an das plotly script übergeben !!!
    $_res = $db->query($_qu_str);
    if ($_res){
      while ($_item = $_res -> fetchArray(SQLITE3_ASSOC)) {
        $_data[$_cnt] = $_item ;
        // echo '<pre>'; print $_cnt . '  ' ; print_r ($_item) ; echo '</pre>';
        $_cnt = $_cnt + 1;
        }
      }

    // !! Mit >$_datum_start< und >$_datum_ende< werden Start- und Ende-Datum an das plotly script übergeben !
    $_datum_ende  = $_datum ;
    $_datum_start = $_t_start ;
  }

  /*
  CREATE TABLE fstb (
      unix_time_norm INTEGER,
      ux_time      INTEGER,
      esp8266id    STRING,
      zeit_norm,
      datum,
      uhrzeit,
      humidity     REAL,
      temperature  REAL,
      SDS_P1       REAL,
      SDS_P2       REAL,
      line_number  INTEGER,
      PRIMARY KEY (
          ux_time,
          esp8266id
      )
  );

  [ux_time]      => 1496399550
  [unix_time_norm] => 1496399473
  [esp8266id]    => 2326588
  [zeit_norm]    => 2017-06-02 12:32:30	     #       normiert!
  [datum]        => 2017-06-02	             # nicht normiert!
  [uhrzeit]      => 12:31:13	               # nicht normiert!
  [humidity]     => 52.4
  [temperature]  => 24.6
  [SDS_P1]       => 11.17
  [SDS_P2]       => 9.67
  [line_number]  => 608                      #


  */
?>

<head>
  <!-- Plotly.js -->
   <script src="https://cdn.plot.ly/plotly-latest.min.js"></script>
</head>

<body>
  <div id="myDiv" style="width: 480px; height: 400px;"><!-- Plotly chart will be drawn inside this DIV --></div>
  <script>

	function makeplot_from_csv() {
		  // Plotly.d3.csv("https://raw.githubusercontent.com/plotly/datasets/master/2014_apple_stock.csv", function(data){ processData(data) } );};
		  Plotly.d3.csv('http://192.168.2.104/feinstaublog/20170626_test.csv', function(csv_data){
        processData_from_csv(csv_data) } );
    };


  function make_trace (x, y, esp8266id, messwert, farbe){
		trace = {
  			x, y,
  			line: {
  				color: farbe,
          // shape: 'spline',
          shape: 'linear',
  				width: 0.5 },
  			mode: 'lines',
        connectgaps: false,
  			name: esp8266id + ': ' + messwert
  			}
  		return trace
  	};


	function make_trace_from_csv (data_csv, esp8266id, messwert, farbe){
		var x, y
		x = [], y = []
		for (var i=0; i<data_csv.length; i++) {
			row = data_csv[i];
			if (row['esp8266id'] == esp8266id) {
				x.push( row['zeit_norm'] );
				y.push( row[messwert] );
				}
			}
		// console.log('zeit_norm', x, messwert, y);
    return make_trace (x, y, esp8266id, messwert, farbe)
  };

    function make_trace_from_array (data, esp8266id, messwert, farbe){
  		var x, y
  		x = [], y = []
  		for (var i=0; i<data.length; i++) {
  			row = data[i];
  			if (row['esp8266id'] == esp8266id) {
  				x.push( row['zeit_norm'] );
  				y.push( row[messwert] );
  				}
  			}
  		console.log('zeit_norm', x, messwert, y);
  		return make_trace (x, y, esp8266id, messwert, farbe)
    };

  function processData_from_csv(data) {
    trace_01 = make_trace_from_csv (data, '2326588', 'SDS_P1', 'rgb(66, 127, 14)')
		trace_02 = make_trace_from_csv (data, '2326588', 'SDS_P2', 'rgb(0,100,0)')
		trace_03 = make_trace_from_csv (data, '3912953', 'SDS_P1', 'rgb(30,144,255)')
		trace_04 = make_trace_from_csv (data, '3912953', 'SDS_P2', 'blue')
		var data = [ trace_01, trace_02, trace_03, trace_04];
		makePlotly( data );
    };

  function processData_from_array(data, datum_intervall) {
    trace_01 = make_trace_from_array (data, '2326588', 'SDS_P1', 'rgb(66, 127, 14)')
		trace_02 = make_trace_from_array (data, '2326588', 'SDS_P2', 'rgb(0,100,0)')
		trace_03 = make_trace_from_array (data, '3912953', 'SDS_P1', 'rgb(30,144,255)')
		trace_04 = make_trace_from_array (data, '3912953', 'SDS_P2', 'blue')
		var data = [ trace_01, trace_02, trace_03, trace_04];
		makePlotly( data, datum_intervall );
    };

	function makePlotly( data, datum_intervall ){
		var plotDiv = document.getElementById("plot");
    // https://plot.ly/create/?fid=Will_Manns:36 : JSON > object > layout
		var layout = {
      autosize: false,
      width:  1000,
      height:  500,
			title: 'Feinstaub: ' + datum_intervall ,
			yaxis: {range: [0, 80]},
      xaxis: {
        title	:	"X-Achse" ,
        tickfont : {size: 8},
        //tickformat:	"%a %Y-%m-%d %H-%M-%S",
        tickformat:	"%a %m-%d %H-%M",
        },
      // https://community.plot.ly/t/set-range-on-xaxis-with-dates/1040/2
//			xaxis: {range: [2, 5]}
    };

		Plotly.newPlot('myDiv', data, layout)
		};


  // *****************************************
  // ************ main program: **************
  // *****************************************

  // Fetch values from database via php - var: >$_data<
  var data = <?php echo json_encode($_data, JSON_PRETTY_PRINT) ?>;
  var last_ele = data[data.length - 1];
  // last_ele.SDS_P1 =
  /*
  for (let row of data) {
    for (var key in row) {
      //console.log(key, row[key]);
      }
    }
  */
  var datum_ende  = <?php echo json_encode($_datum_ende, JSON_PRETTY_PRINT) ?>;
  var datum_start = <?php echo json_encode($_datum_start, JSON_PRETTY_PRINT) ?>;
  if (datum_start == datum_ende) {
    datum_intervall = datum_start ;
    }
  else {
    datum_intervall = datum_start  + ' - ' + datum_ende  ;
    }

  //makeplot_from_csv(); // Plotly.d3.csv( ... ) -> processData_from_csv(...) -> makePlotly( ... )

  processData_from_array(data, datum_intervall) ;
  // Plotly.d3.csv( ... )  # fetches data
  // processData(...)      # reformats data in appropriate data structure
  // makePlotly( ... )     # makes grph in ELement "plot"

  </script>
</body>
